{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2015-12-26-fft/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"a0d77b01-4a1f-5865-a4dc-942165ef993d","excerpt":"The last section on the divide-and-conquer design paradigm on the book Algorithms by S. Dasgupta, C. H. Papadimitriou, and U. V. Vazirani focuses on a very…","html":"<p>The last section on the divide-and-conquer design paradigm on the book <a href=\"http://beust.com/algorithms.pdf\">Algorithms by S. Dasgupta, C. H. Papadimitriou, and U. V. Vazirani</a> focuses on a very interesting and well known algorithm: <a href=\"https://en.wikipedia.org/wiki/Fast_Fourier_transform\">The Fast Fourier Transform algorithm</a>. The Fast Fourier Transform is an algorithm which takes a coefficient representation of a polynomial and changes it to its equivalent point-wise representation. It is widely used in a varieaty of tasks in computer science such as: getting rid of noise in data, pattern matching, digital filtering, and others.</p>\n<p>The big idea in the Fast Fourier Transform algorithm is that a change in the mathematical representation in a problem can simplify and have efficiency benefits over others. To better undesrtand this idea, let’s examine the following polynomial: <code class=\"language-text\">f(x) = 5 + 2x + x^2</code>. This poynomial has degree <code class=\"language-text\">2</code>, and <code class=\"language-text\">3</code> numbers represent it (its coefficients). In general, a polynomial of <code class=\"language-text\">n - 1</code> degree has <code class=\"language-text\">n</code> coefficients. Now, let’s investigate what values does this polynomial has at <code class=\"language-text\">x</code> equals to <code class=\"language-text\">0</code>, <code class=\"language-text\">1</code>, and <code class=\"language-text\">2</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  x = 0, then f(x) = 5\n  x = 1, then f(x) = 8\n  x = 2, then f(x) = 13</code></pre></div>\n<p>The natural question is then, if <code class=\"language-text\">n</code> points are given, do these numbers define a polynomial of <code class=\"language-text\">n - 1</code> degree? Yes, we can solve a set of linear equations, and the answer will be equal to <code class=\"language-text\">f(x) = 5 + 2x + x^2</code>. So what does this mean? We have been able to show that a polynomial can be represented in two different ways:</p>\n<ul>\n<li>A coefficient representation</li>\n<li>A point-wise representation</li>\n</ul>\n<p>The algorithmic steps of the Fast Fourier Transform algorithm takes (assume <code class=\"language-text\">n</code> is a power of 2):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  A(x) = a0 + a1x + a2x^2 + ... + a(n-1)x(n-1)</code></pre></div>\n<p>Re-writes it as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  a0      + a2x^2       + a4x^4        + a(n-2)x^(n-2)\n    + a1x        + a3x^3       + a4x^4 + a(n-1)x^(n-1)</code></pre></div>\n<p>Then, define new polynomials (the divide step):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Ae(y) = a0 + a2y + a4y^2 + a6^y3 + ... + a(n-2)y^(n-2/2)\n  Ao(y) = a1 + a3y + a5y^2 + a6^y3 + ... + a(n-1)y^(n-2/2)</code></pre></div>\n<p>And finally, <code class=\"language-text\">A(w)</code> can be expressed as (the combine step):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  A(w) = Ae(w^2) + w * Ao(w^2)</code></pre></div>\n<p>The only issue though, is that the points which the algorithm needs to use to compute <code class=\"language-text\">A(w)</code> for an <code class=\"language-text\">n</code> (power of 2) need to be carefully chosen. The method  the author suggests is using the <a href=\"https://en.wikipedia.org/wiki/Root_of_unity\">complex nth-roots of unity</a>. By using the complex nth-roots of unity for an <code class=\"language-text\">n</code> power of 2, then at successive levels of recursion tree we will have <code class=\"language-text\">(n/2^k)th</code> roots of unity for  <code class=\"language-text\">k=0, 1, 2, 3, ...</code>.</p>\n<h3>The Fast Fourier Transform Algorithm</h3>\n<h4><a href=\"http://beust.com/algorithms.pdf\">Pseudocode:</a> (Page 71)</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function FFT(A, ω)\n  Input: Coefficient representation of a polynomial A(x) of degree ≤ n − 1, where n is a power of 2\n  Output: Value representation A(ω^0), . . . , A(ω^n−1)\n\n  if ω = 1: return A(1)\n  express A(x) in the form Ae(x^2) + xAo(x^2)\n  call FFT(Ae, ω^2) to evaluate Ae at even powers of ω\n  call FFT(Ao, ω^2) to evaluate Ao at even powers of ω\n  for j = 0 to n − 1:\n    compute A(ω^j) = Ae(ω^2j) + ω^jAo(ω^2j)\n  return A(ω^0), . . . , A(ω^n−1)</code></pre></div>\n<h4>Implementation:</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FFT</span>\n  <span class=\"token comment\"># Input: n coefficients</span>\n  <span class=\"token comment\"># Output: Point-wise representation of the n coefficients</span>\n  <span class=\"token comment\"># Vec size must be a power of 2</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">fft</span></span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> vec <span class=\"token keyword\">if</span> vec<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\"># Split A(x) into its odd and even powers</span>\n    a_even <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>each_with_index<span class=\"token punctuation\">.</span>select <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>_<span class=\"token punctuation\">,</span> i<span class=\"token operator\">|</span> i<span class=\"token punctuation\">.</span>even<span class=\"token operator\">?</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>i<span class=\"token punctuation\">,</span> _<span class=\"token operator\">|</span> i <span class=\"token punctuation\">}</span>\n    a_odd <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>each_with_index<span class=\"token punctuation\">.</span>select <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>_<span class=\"token punctuation\">,</span> i<span class=\"token operator\">|</span> i<span class=\"token punctuation\">.</span>odd<span class=\"token operator\">?</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>i<span class=\"token punctuation\">,</span> _<span class=\"token operator\">|</span> i <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># Express A(x) in the form Ae(x^2) + xAo(x^2)</span>\n    fft_even <span class=\"token operator\">=</span> fft<span class=\"token punctuation\">(</span>a_even<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    fft_odd  <span class=\"token operator\">=</span> fft<span class=\"token punctuation\">(</span>a_odd<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n\n    <span class=\"token comment\"># Compute Ae(x^2) + xAo(x^2)</span>\n    fft_even<span class=\"token punctuation\">.</span>zip<span class=\"token punctuation\">(</span>fft_odd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>each_with_index<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>even<span class=\"token punctuation\">,</span> odd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">|</span>\n      even <span class=\"token operator\">+</span> odd <span class=\"token operator\">*</span> omega<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token comment\"># Calculates (e ^ (2πik/n))</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">omega</span></span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token constant\">Math</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">E</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token constant\">Math</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h4>Tests:</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'minitest/autorun'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'./fft'</span>\n\ndescribe <span class=\"token constant\">FFT</span> <span class=\"token keyword\">do</span>\n\n  before <span class=\"token keyword\">do</span>\n    <span class=\"token variable\">@fft</span> <span class=\"token operator\">=</span> <span class=\"token constant\">FFT</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n\n  describe <span class=\"token string\">\"#fft\"</span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string\">\"should return a point-wise representation of a polynomial of degree 1\"</span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@fft</span><span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.2246467991473532e-16</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string\">\"should return a point-wise representation of a polynomial of degree 3\"</span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@fft</span><span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.2246467991473532e-16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.9999999999999998</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string\">\"should return a point-wise representation of a polynomial of degree 7\"</span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@fft</span><span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2.414213562373095</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.2246467991473532e-16</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.2246467991473532e-16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.4142135623730949</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2.4492935982947064e-16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.9999999999999998</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">0.41421356237309515</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2246467991473532e-16</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.224646799147353e-16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.9999999999999994</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">2.414213562373095</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Conclusion</h3>\n<p>The Fast Fourier Transform algorithm is a really nice way to demonstrate how mathematical ingenuity plays a big role in the design and analysis of algorithms. Changing the representation of the data given to us for a specific task can bring great benefits to both the understanding of the overall process and the efficiency in the computations needed to produce the desired output.</p>","frontmatter":{"title":"The Fast Fourier Transform Algorithm","date":"December 26, 2015","description":null}},"previous":{"fields":{"slug":"/2015-12-20-merge-sort/"},"frontmatter":{"title":"The Merge Sort Algorithm"}},"next":{"fields":{"slug":"/2016-01-01-depth-first-search-undirected-graphs/"},"frontmatter":{"title":"Depth First Search In Undirected Graphs"}}},"pageContext":{"id":"a0d77b01-4a1f-5865-a4dc-942165ef993d","previousPostId":"cb3273fc-8f74-5d57-9bc6-e2a994938e4d","nextPostId":"da4f36fd-f74d-55e6-8e16-16afd315faeb"}},
    "staticQueryHashes": ["650872877"]}