{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2015-12-17-karatsuba-multiplication/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"edf1422c-bcf1-5ca7-b146-1d5dbaeb6450","excerpt":"Over the past few months, I have developed an interest for Artificial Intelligence (specifically Machine Learning in the form of data mining). Because of thisâ€¦","html":"<p>Over the past few months, I have developed an interest for Artificial Intelligence (specifically Machine Learning in the form of data mining). Because of this, I have decided I will start off by reviewing (while learning some new things as well) the fundamentals of computer science (data structures and algorithms), before diving into data mining itself. To do this, I will be reading the book <a href=\"http://beust.com/algorithms.pdf\">Algorithms by S. Dasgupta, C. H. Papadimitriou, and U. V. Vazirani</a>. If you would like to read it, keep in mind it does have a <a href=\"http://cseweb.ucsd.edu/~dasgupta/book/errata.pdf\">few mistakes</a>, thus I recommend correcting them before you start reading.</p>\n<h3>Divide-and-conquer</h3>\n<p>The second chapter starts off with the divide-and-conquer design paradigm. The main idea of the divide-and-conquer design paradigm is:</p>\n<ul>\n<li>Break a problem into subproblems</li>\n<li>Recursively solve these subproblems</li>\n<li>Combine their answers</li>\n</ul>\n<p>To better illustrate this, the author explains the Karatsuba multiplication algorithm. The whole idea behind this algorithm, is that the product of two complex numbers can be done with just three real-number multiplications (instead of four). In the divide-and-conquer design paradigm, reducing the number of subproblems (that is, reducing the branching factor of the recursion tree) produces a big impact in the overall running time of the algorithm. This happens because the reduction of subproblems occurs at every level of the recursion tree, producing a compounding effect which leads to a better performance.</p>\n<h3>The Karatsuba Multiplication Algorithm</h3>\n<h4><a href=\"https://en.wikipedia.org/wiki/Karatsuba_algorithm\">Pseudocode:</a></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">procedure karatsuba(num1, num2)\n  if (num1 &lt; 10) or (num2 &lt; 10)\n    return num1*num2\n  /* calculates the size of the numbers */\n  m = max(size_base10(num1), size_base10(num2))\n  m2 = m/2\n  /* split the digit sequences about the middle */\n  high1, low1 = split_at(num1, m2)\n  high2, low2 = split_at(num2, m2)\n  /* 3 calls made to numbers approximately half the size */\n  z0 = karatsuba(low1,low2)\n  z1 = karatsuba((low1+high1),(low2+high2))\n  z2 = karatsuba(high1,high2)\n  return (z2*10^(2*m2))+((z1-z2-z0)*10^(m2))+(z0)</code></pre></div>\n<h4>Implementation:</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Karatsuba</span>\n  <span class=\"token comment\"># Multiply two numbers using the Karatsuba</span>\n  <span class=\"token comment\"># multiplication algorithm</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">multiply</span></span><span class=\"token punctuation\">(</span>num_1<span class=\"token punctuation\">,</span> num_2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> num_1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">||</span> num_2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span>\n      <span class=\"token keyword\">return</span> num_1 <span class=\"token operator\">*</span> num_2\n    <span class=\"token keyword\">end</span>\n    m_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>num_1<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> num_2<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>max<span class=\"token operator\">/</span><span class=\"token number\">2</span>\n    <span class=\"token comment\"># Split the digit sequences about the middle</span>\n    high_1<span class=\"token punctuation\">,</span> low_1 <span class=\"token operator\">=</span> num_1<span class=\"token punctuation\">.</span>divmod<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span>m_2<span class=\"token punctuation\">)</span>\n    high_2<span class=\"token punctuation\">,</span> low_2 <span class=\"token operator\">=</span> num_2<span class=\"token punctuation\">.</span>divmod<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span>m_2<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Recursively calculate the product using three</span>\n    <span class=\"token comment\"># multiplications of smaller numbers</span>\n    z_0 <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">(</span>low_1<span class=\"token punctuation\">,</span> low_2<span class=\"token punctuation\">)</span>\n    z_1 <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>low_1 <span class=\"token operator\">+</span> high_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>low_2 <span class=\"token operator\">+</span> high_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    z_2 <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">(</span>high_1<span class=\"token punctuation\">,</span> high_2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>z_2 <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> m_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>z_1 <span class=\"token operator\">-</span> z_2 <span class=\"token operator\">-</span> z_0<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token punctuation\">(</span>m_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>z_0<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h4>Tests:</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'minitest/autorun'</span></span>\n<span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'./karatsuba'</span></span>\n\ndescribe Karatsuba <span class=\"token keyword\">do</span>\n  before <span class=\"token keyword\">do</span>\n    <span class=\"token variable\">@karatsuba</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Karatsuba</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n\n  describe <span class=\"token string-literal\"><span class=\"token string\">\"#multiply\"</span></span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string-literal\"><span class=\"token string\">\"should multiply small numbers of equal size\"</span></span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@karatsuba</span><span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string-literal\"><span class=\"token string\">\"should multiply small numbers of different size\"</span></span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@karatsuba</span><span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string-literal\"><span class=\"token string\">\"should multiply small numbers with zeros inbetween\"</span></span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@karatsuba</span><span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string-literal\"><span class=\"token string\">\"should multiply large numbers with zeros inbetween\"</span></span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@karatsuba</span><span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span><span class=\"token number\">100020001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10030501</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1003250720050501</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string-literal\"><span class=\"token string\">\"should multiply large numbers of equal size\"</span></span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@karatsuba</span><span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span><span class=\"token number\">345345345</span><span class=\"token punctuation\">,</span> <span class=\"token number\">146348395</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50540736961471275</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string-literal\"><span class=\"token string\">\"should multiply large numbers of different size\"</span></span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@karatsuba</span><span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">(</span><span class=\"token number\">7655432</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7853</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60118107496</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Conclusion</h3>\n<p>The Karatsuba multiplication algorithm was relatively straightforward and fun to implement. I look forward to keep reviewing/learning more while I enjoy reading this book.</p>","fileAbsolutePath":"/Users/diego/diegocasmo/diegocasmo.github.io/content/blog/2015-12-17-karatsuba-multiplication.md","frontmatter":{"title":"The Karatsuba Multiplication Algorithm","date":"December 17, 2015","description":null}},"previous":{"fields":{"slug":"/2015-07-28-backbone-required-attributes/"},"frontmatter":{"title":"Backbone Required Attributes"}},"next":{"fields":{"slug":"/2015-12-20-merge-sort/"},"frontmatter":{"title":"The Merge Sort Algorithm"}}},"pageContext":{"id":"edf1422c-bcf1-5ca7-b146-1d5dbaeb6450","previousPostId":"73e63082-88a2-539d-9f75-34e2e09e426c","nextPostId":"576ec876-2b8a-5a07-810f-9788e52d1ff2"}},
    "staticQueryHashes": ["650872877"]}