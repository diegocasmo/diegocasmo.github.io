{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2015-12-20-merge-sort/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"cb3273fc-8f74-5d57-9bc6-e2a994938e4d","excerpt":"The next algorithm in the divide-and-conquer design paradigm chapter the book examines is the merge sort algorithm. Sorting problems are suitable for using the…","html":"<p>The next algorithm in the divide-and-conquer design paradigm chapter the <a href=\"http://beust.com/algorithms.pdf\">book</a> examines is the merge sort algorithm. Sorting problems are suitable for using the divide-and-conquer design paradigm: given an array of numbers <code class=\"language-text\">a[i...n]</code>, return a sorted version of <code class=\"language-text\">a</code>. These are the steps taken by the merge sort algorithm to sort an array of numbers:</p>\n<ul>\n<li>Split the array into two halves</li>\n<li>Recursively sort each half</li>\n<li>Merge the two sorted arrays</li>\n</ul>\n<p>The correctness of the merge sort algorithm is self-evident as long as a proper merge subroutine is implemented. But how can we merge two subarrays <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> into a single sorted array <code class=\"language-text\">z</code>? The method the author proposes is by looking at the very first index of each subarray, <code class=\"language-text\">x[1]</code> and <code class=\"language-text\">y[1]</code>, and whichever one is the smallest will be the very first element of the sorted array <code class=\"language-text\">z</code>. The rest of <code class=\"language-text\">z</code> can then be built recursively.</p>\n<p>To analyze the running time of merge sort algorithm, we can take a look at the relation of <code class=\"language-text\">a/b^d</code> presented by the master method (where <code class=\"language-text\">a = # recursive calls</code>, <code class=\"language-text\">b = branching factor</code>, <code class=\"language-text\">d = exponent of the combine step running time</code>), <code class=\"language-text\">a</code> would be equal to <code class=\"language-text\">2</code>, <code class=\"language-text\">b = 2</code>, and <code class=\"language-text\">d = 1</code>, which will lead to <code class=\"language-text\">a/b^d = 1</code>, and that corresponds to a running time of <code class=\"language-text\">O(nlogn)</code>. In other words, the rate of work shrinkage per subproblem is equal to the rate of subproblem proliferation (same amount of work at each level of the recursion tree).</p>\n<h4>Pseudocode:</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function mergesort(a[1 . . . n])\n  Input: An array of numbers a[1 . . . n]\n  Output: A sorted version of this array\n\n  if n > 1:\n    return merge(mergesort(a[1 . . . bn/2c]), mergesort(a[bn/2c + 1 . . . n]))\n  else:\n    return a\n\nfunction merge(x[1 . . . k], y[1 . . . l])\n  if k = 0: return y[1 . . . l]\n  if l = 0: return x[1 . . . k]\n  if x[1] ≤ y[1]:\n    return x[1] ◦ merge(x[2 . . . k], y[1 . . . l])\n  else:\n    return y[1] ◦ merge(x[1 . . . k], y[2 . . . l])</code></pre></div>\n<h4>Implementation:</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MergeSort</span>\n  <span class=\"token comment\"># Sorts an array using the merge sort algorithm</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">sort</span></span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">if</span> length <span class=\"token operator\">></span> <span class=\"token number\">1</span>\n      mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>floor\n      <span class=\"token keyword\">return</span> merge<span class=\"token punctuation\">(</span>sort<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sort<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">return</span> arr\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token comment\"># Merges two array in sorted order</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">merge</span></span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> left<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span>\n      <span class=\"token keyword\">return</span> right\n    <span class=\"token keyword\">elsif</span> right<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span>\n      <span class=\"token keyword\">return</span> left\n    <span class=\"token keyword\">elsif</span> left<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">.</span>first\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span>merge<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span>merge<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h4>Tests:</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'minitest/autorun'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'./merge_sort'</span>\n\ndescribe <span class=\"token constant\">MergeSort</span> <span class=\"token keyword\">do</span>\n  before <span class=\"token keyword\">do</span>\n    <span class=\"token variable\">@merge_sort</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MergeSort</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n  <span class=\"token keyword\">end</span>\n\n  describe <span class=\"token string\">\"#sort\"</span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string\">\"should sort an array of 1 element\"</span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@merge_sort</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string\">\"should sort an array of multiple elements\"</span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@merge_sort</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string\">\"should sort an array of multiple elements with equal slots\"</span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@merge_sort</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string\">\"should sort an array of multiple elements with negative numbers\"</span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@merge_sort</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string\">\"should sort an array of odd length\"</span> <span class=\"token keyword\">do</span>\n      assert_equal<span class=\"token punctuation\">(</span><span class=\"token variable\">@merge_sort</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Conclusion</h3>\n<p>Just as the author explained, sorting problems immediately lend towards a divide-and-conquer approach. Next, I will be revisiting/learning more about medians, matrix multiplication, and the fast Fourier transform.</p>","frontmatter":{"title":"The Merge Sort Algorithm","date":"December 20, 2015","description":null}},"previous":{"fields":{"slug":"/2015-12-17-karatsuba-multiplication/"},"frontmatter":{"title":"The Karatsuba Multiplication Algorithm"}},"next":{"fields":{"slug":"/2015-12-26-fft/"},"frontmatter":{"title":"The Fast Fourier Transform Algorithm"}}},"pageContext":{"id":"cb3273fc-8f74-5d57-9bc6-e2a994938e4d","previousPostId":"0a59db91-b1f5-5b28-9518-9d96705b0d11","nextPostId":"a0d77b01-4a1f-5865-a4dc-942165ef993d"}},
    "staticQueryHashes": ["650872877"]}