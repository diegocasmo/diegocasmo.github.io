{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-01-23-navigation-redirects-through-redux-middleware/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"df305ed7-f3b6-593d-8fde-9bb7ac4ee85f","excerpt":"Client-Side Routing Routing in client-side applications usually starts off as a small number of routes with a few redirects or custom code here and there. But…","html":"<h3>Client-Side Routing</h3>\n<p>Routing in client-side applications usually starts off as a small number of routes with a few redirects or custom code here and there. But as soon as the application starts to grow and the number of features on it increases, routing commonly becomes a hard to maintain and complex domain. Ever more interactive client-side applications require an intuitive and consistent routing solution to provide a better UX, and we as developers must make sure we use equally intuitive and consistent design paradigms to deal with complex routing requirements.</p>\n<p>The goal of this blog post is to explain how to use <a href=\"https://github.com/reactjs/redux\">Redux</a> middleware to create a solution for client-side navigation redirects which is intuitive, scalable, and easy to maintain.</p>\n<h3>A Redux Walk-through</h3>\n<p><a href=\"http://redux.js.org/\">Redux is a predictable state container for JavaScript applications</a>. It offers a simple solution to storing and handling state changes. Redux can be used with any view library, though it’s very commonly used with <a href=\"https://facebook.github.io/react/\">React</a>.</p>\n<p>In Redux, the whole application state is stored in a single place: the <code class=\"language-text\">store</code>. The state of the application can only be modified through an <code class=\"language-text\">action</code>. When an action is dispatched, it’s handled by a <code class=\"language-text\">reducer</code> which proceeds to update the store as needed.</p>\n<p>A Redux <code class=\"language-text\">middleware</code> provides and extension to the Redux work flow. It allows the developer to capture an action and execute some custom code before or after it’s dispatched.</p>\n<h3>Redux Middleware In Action</h3>\n<p>Let’s now assume we are working on a simple TODO application using React and Redux. The TODO application allows a user to see all TODO’s at <code class=\"language-text\">/</code> (the index route) and click a single TODO at <code class=\"language-text\">/:todoId</code> to view its details or edit it.  We want to add a new feature to our TODO application: give the user the ability to delete a single TODO when viewing its details at <code class=\"language-text\">/:todoId</code>. If the TODO is successfully deleted, the user should be redirected to the index page.</p>\n<p>In  order to delete a TODO, we create a couple of new actions in the application:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TODO__DELETE__INIT // Dispatched when user clicks the delete button\nTODO__DELETE__SUCCESS // Dispatched when a TODO has been successfully deleted\nTODO__DELETE__FAILURE // Dispatched if there was a problem while attempting to delete a TODO</code></pre></div>\n<p>Our goal is to create a Redux middleware that is executed right after the <code class=\"language-text\">TODO__DELETE__SUCCESS</code> is dispatched and redirect the user to the index page. Here’s how we are going to do it:</p>\n<ul>\n<li>First, let’s create a utility method which will allows us to create a Redux middleware and execute custom code before or after the action is dispatched:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Immutable <span class=\"token keyword\">from</span> <span class=\"token string\">'immutable'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Helper method for creating a middleware that handles the given set of actions</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">handlers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">storeAPI</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> actionHandler <span class=\"token operator\">=</span> Immutable<span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span>handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> h<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Execute custom middleware handler before the action is dispatched</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>actionHandler <span class=\"token operator\">&amp;&amp;</span> actionHandler<span class=\"token punctuation\">.</span>beforeHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      actionHandler<span class=\"token punctuation\">.</span><span class=\"token function\">beforeHandler</span><span class=\"token punctuation\">(</span>storeAPI<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Dispatch the action</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Execute custom middleware handler after the action is dispatched</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>actionHandler <span class=\"token operator\">&amp;&amp;</span> actionHandler<span class=\"token punctuation\">.</span>afterHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      actionHandler<span class=\"token punctuation\">.</span><span class=\"token function\">afterHandler</span><span class=\"token punctuation\">(</span>storeAPI<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Next, we’ll use the created utility method to define the redirect code. Notice I have defined an <code class=\"language-text\">afterHandler</code>, which will effectively execute the code after the action has been dispatched:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>browserHistory<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> redirectMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">createMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Redirect user to index page on successful TODO delete</span>\n    action<span class=\"token operator\">:</span> <span class=\"token constant\">TODO__DELETE__SUCCESS</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">afterHandler</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">storeAPI<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      browserHistory<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>pathname<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Last thing needed is to apply the Redux middleware to the store, here’s how to do it:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createStore<span class=\"token punctuation\">,</span> combineReducers<span class=\"token punctuation\">,</span> applyMiddleware<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>redirectMiddleware<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../middleware/redirect_middleware'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> todoApp <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>\n  todoApp<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>redirectMiddleware<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Apply redirect middleware</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Conclusion</h3>\n<p>I have been using Redux middleware for handling navigation redirects for quite a while now, and this solution has proven to be intuitive, scalable, and easy to maintain. Redux middleware are also commonly used for logging, crash reporting, and talking to an asynchronous API.</p>\n<p>Do you have a different solution for dealing with navigation redirects in client-side applications? Leave a comment below :).</p>","frontmatter":{"title":"Navigation Redirects Through Redux Middleware","date":"January 23, 2017","description":null}},"previous":{"fields":{"slug":"/2016-10-24-passing-variables-in-an-isomorphic-application/"},"frontmatter":{"title":"Using React's Context to Pass Variables From the Server to the Client"}},"next":{"fields":{"slug":"/2017-02-06-a-simple-react-tabs-component/"},"frontmatter":{"title":"A Simple React <Tabs/> Component"}}},"pageContext":{"id":"df305ed7-f3b6-593d-8fde-9bb7ac4ee85f","previousPostId":"740aca73-3ba8-53ea-80f3-293dfbc762ab","nextPostId":"69dbd38d-816c-545b-b76a-03216d704bb7"}},
    "staticQueryHashes": ["2841359383"]}