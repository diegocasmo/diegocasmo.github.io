{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2017-07-10-a-short-list-of-good-practices-in-programming/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"e5b3dd1c-09b8-5337-b0c8-51e62f43e571","excerpt":"Writing software is more than simply creating an application that\nfulfills its requirements; it has to be created to be maintainable,\nrobust, verifiable, and…","html":"<p>Writing software is more than simply creating an application that\nfulfills its requirements; it has to be created to be maintainable,\nrobust, verifiable, and readable, among many other things. Because\nof this, we as developers need to constantly strive to learn and\nfind new ways that can help create better code, and ultimately, a\nbetter software application.</p>\n<p>The goal of this blog post is to list a few good programming practices\nthan can improve your code. This list is not by any means exhaustive\n(there are entire books written about this very topic). That being\nsaid, I have focused on listing good programming practices that\nhave had the greatest impact on the quality of the code I write.</p>\n<h3>Test Driven Development (TDD)</h3>\n<p>Writing tests first offers many advantages such as verifiability,\nregression prevention, and documentation, among others. But one of\nmy favorites is that it introduces a “user” of the code that will\nbe written.</p>\n<p>A test itself can be thought as a user of some code that will\neventually be written, and as a result of it, writing code using\nthe tests first approach enforces good design of code. This means\nthat code written using TDD is usually better designed as writing\nthe tests first forces the developer to write code that is easy to\ntest, which is usually well designed code.</p>\n<p>It is worth pointing out that TDD should be used together with\nBehavior Driven Development (BDD). TDD usually relies too much on\nthe specific implementation a developer decided to use, while BDD\ninstead tests the behavior of the code. This is specially useful\nwhile refactoring, as you can still be able to tell if the new code\ncorrectly implements the required behavior of the old code, without\nhaving to update any behavior tests at all.</p>\n<h3>Use Pure Functions</h3>\n<p>A pure function is defined as a method which, given the same input,\nwill always return the same output and depend on no external mutable\nstate. Pure functions offer a variety of benefits such as no side\neffects, ease of testing, ease of debugging, etc.</p>\n<p>To illustrate pure functions, let us consider the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> sortedNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 3, 5]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sortedNumbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 3, 5]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers <span class=\"token operator\">===</span> sortedNumbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>The <code class=\"language-text\">Array</code> sort method is an impure function as it mutates the\noriginal array on which it is executed. This could lead to hard-to-find\nbugs, as the application would not necessarily always want to have\nthe array of <code class=\"language-text\">numbers</code> in that particular order. A pure implementation\nin ES6 would instead look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compareFunction <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>compareFunction<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> sortedNumbers <span class=\"token operator\">=</span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [5, 3, 1]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sortedNumbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 3, 5]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers <span class=\"token operator\">===</span> sortedNumbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>The example above does not mutate the <code class=\"language-text\">numbers</code> array anymore. In\naddition to that, it allows passing of an optional sort method to\nspecify how to sort the array, which makes the <code class=\"language-text\">sortArray</code> method\nmore reusable.</p>\n<p>A related point to consider is favoring the use of functional\nprogramming. Functional programming is a declarative software\nprogramming paradigm and it avoids changing state and mutable data.\nThere are many concepts to functional programming other than pure\nfunctions, but the use of it will enforce code that uses pure\nfunctions.</p>\n<h3>Single Source of Truth (SSOT)</h3>\n<p>The concept of a single source of truth refers to the idea of storing\napplication data in only one place. Any other link to a specific\npiece of information is simply done by reference, and thus this\napproach can help to both avoid data synchronization issues and\ncreate a clearer separation of data and its representation.</p>\n<p>SSOT can also be applied to other endeavors outside of software\ndevelopment, such as to an organization or product development.</p>\n<p><code class=\"language-text\">boolean</code> variables should be named positively and contain <code class=\"language-text\">is</code>\nwhich implies <code class=\"language-text\">true/false</code></p>\n<p>Naming <code class=\"language-text\">boolean</code> variables positively helps to avoid double negatives\nwhich are more complicated to understand. Consider the following\nexample in English:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">You can't see no one in this crowd</code></pre></div>\n<p>This sentence actually means you can see everyone in this crowd,\nbut it is difficult to understand because it is written negatively.\nLet us now consider another example, but this time written in\nJavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> inactive <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inactive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'is active'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This piece of code can be easily improved by applying the concepts\nfrom above. First, let us add the word <code class=\"language-text\">is</code> to the name of the\nvariable, in order to imply <code class=\"language-text\">true/false</code>, and finally let us rename\nit to <code class=\"language-text\">active</code>, so that it is written positively:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> isActive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'is active'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This modified version is far easier to understand and read than the\none written negatively. Always favor naming boolean variables\npositively and include <code class=\"language-text\">is</code> to imply <code class=\"language-text\">true/false</code>. With relatively\nlow effort, this good practice will tremendously improve the\nreadability of your code.</p>\n<h3>Favor the Verb-noun Approach for Naming Methods</h3>\n<p>Naming things is one of those problems that have haunted software\ndevelopers for quite a long time. That being said, there are a few\ntricks developers can use to alleviate this issue, and one that has\nworked good for me is the verb-noun approach for naming methods.</p>\n<p>When naming a method, start by describing the action it will perform\nwith a verb, such as <code class=\"language-text\">get</code>, <code class=\"language-text\">set</code>, <code class=\"language-text\">transform</code>, or <code class=\"language-text\">render</code>. After\nthe action the method will perform has been specified, include a\ndescription of the value the method will return or update such as\n<code class=\"language-text\">getInvestmentTotal(...args)</code>, <code class=\"language-text\">renderHeader(...args)</code>, or\n<code class=\"language-text\">saveUserAvatar(...args)</code>.</p>\n<p>Using the verb-noun approach will help other developers to more\nclearly understand the code you have written and save them time by\nletting them understand what the method does without having to read\nits implementation.</p>\n<h3>Conclusion</h3>\n<p>In this blog post, I have listed a few good programming practices\nthat have helped me improve the quality of the code I write. As\nmentioned in the introduction, there are entire books written about\nthis topic, and thus I have limited myself to only list those good\npractices that have had the greatest impact for me as a developer.</p>","frontmatter":{"title":"A Short List of Good Practices in Programming","date":"July 10, 2017","description":null}},"previous":{"fields":{"slug":"/2017-02-06-a-simple-react-tabs-component/"},"frontmatter":{"title":"A Simple React <Tabs/> Component"}},"next":{"fields":{"slug":"/2018-10-24-convolutional-neural-networks-for-galaxy-morphology-classification/"},"frontmatter":{"title":"Convolutional Neural Networks For Galaxy Morphology Classification"}}},"pageContext":{"id":"e5b3dd1c-09b8-5337-b0c8-51e62f43e571","previousPostId":"bef8d023-1135-5d53-97e1-5c5aeddcc60c","nextPostId":"d586f1e1-30e2-5f86-a6d2-df928c61a880"}},
    "staticQueryHashes": ["650872877"]}