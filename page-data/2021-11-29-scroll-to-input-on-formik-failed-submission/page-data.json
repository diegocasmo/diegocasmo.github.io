{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-11-29-scroll-to-input-on-formik-failed-submission/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"d485587d-6614-58fe-8dd9-f0270231b12f","excerpt":"Formik is a well known React library that allows to create forms, manage, and validate their state. It comes with built-in support for Yup, a schema builder for…","html":"<p><a href=\"https://formik.org/\">Formik</a> is a well known React library that allows to create forms, manage, and validate their state. It comes with built-in support for <a href=\"https://github.com/jquense/yup\">Yup</a>, a schema builder for value parsing and validation.</p>\n<p>The <a href=\"https://formik.org/docs/api/fieldarray\">FieldArrray</a> helper is one of my favorite Formik features. It enables the manipulation of lists with ease. One caveat, is that these type of forms usually become long, to the point where all its inputs are not necessarily visible in the window.</p>\n<p>And what if the user made a mistake on a field? Which field was it? Is that field currently visible to the user? The goal of this blog post is to showcase a solution which automatically scrolls an input into the visible area of the window, so that users know which input in the form is invalid.</p>\n<h2>Formik Errors</h2>\n<p>When combined with Yup, Formik will automatically transform validation errors into an object whose properties match its values. For instance, given a form has the following initial values and validation schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> initialValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  friends<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> Yup<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  friends<span class=\"token operator\">:</span> Yup<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>\n    Yup<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> Yup<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> Yup<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>An invalid form submission, where the first “friend” input doesn’t have a name, and the second one has an invalid email, will look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  friends<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Required\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid email\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can take advantage of this error formatting, in combination with Formik’s fields’ name usage of object dot-notation (e.g., <code class=\"language-text\">&lt;Field name={`friends[${index}].name`} /> </code>) to reference nested values, and find an invalid input in the DOM.</p>\n<h2>Scroll To Field Error</h2>\n<p>The first step is to transform a Formik error object to dot-notation, so that we can later on search for inputs by their unique name.</p>\n<p>The <code class=\"language-text\">getFieldErrorNames()</code> function takes a Formik error as an argument, and returns an array of error field names using object dot-notation for array fields. For instance, given the error object from above, it’ll return <code class=\"language-text\">['friends.0.name', 'friends.1.email']</code>, meaning that these attributes at that index have a validation error.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFieldErrorNames</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">formikErrors</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> transformObjectToDotNotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n      <span class=\"token keyword\">const</span> nextKey <span class=\"token operator\">=</span> prefix <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> key\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">transformObjectToDotNotation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> nextKey<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nextKey<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">transformObjectToDotNotation</span><span class=\"token punctuation\">(</span>formikErrors<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next up, <code class=\"language-text\">getFieldErrorNames()</code> needs to be executed when a user submits the form with invalid data. Unfortunately, Formik doesn’t (yet) provide a sort of callback for a client-side failed submission, thus what we’ll be doing instead, is listening to <code class=\"language-text\">submitCount</code> changes, and executing our custom logic to scroll to an invalid input there.</p>\n<p>The <code class=\"language-text\">&lt;ScrollToFieldError/></code> component listens to <code class=\"language-text\">submitCount</code> changes, and calls <code class=\"language-text\">getFieldErrorNames()</code> when the form is invalid. If <code class=\"language-text\">getFieldErrorNames()</code> returns any field error names, it’ll query the first element by name, and scroll it into visible area of the window.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ScrollToFieldError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> submitCount<span class=\"token punctuation\">,</span> isValid<span class=\"token punctuation\">,</span> errors <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFormikContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isValid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">const</span> fieldErrorNames <span class=\"token operator\">=</span> <span class=\"token function\">getFieldErrorNames</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fieldErrorNames<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">input[name='</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fieldErrorNames<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">']</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token comment\">// Scroll to first known error into view</span>\n    element<span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> behavior<span class=\"token operator\">:</span> <span class=\"token string\">\"smooth\"</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>submitCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// eslint-disable-line react-hooks/exhaustive-deps</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And that’s it! The <code class=\"language-text\">&lt;ScrollToFieldError/></code> component can be used within a Formik form (so that it has access to Formik’s context), and whenever an invalid form submission occurs, it’ll automatically scroll the first invalid input into the visible area of the window.</p>\n<p>A live demo is available in this <a href=\"https://codesandbox.io/s/scroll-to-input-formik-failed-submission-gnehr?file=/src/App.js\">CodeSandbox</a>, and all the code required for it in <a href=\"https://github.com/diegocasmo/scroll-to-input-formik-failed-submission\">GitHub</a>.</p>","frontmatter":{"title":"Scroll to Input on Formik Failed Submission","date":"November 29, 2021","description":null}},"previous":{"fields":{"slug":"/2021-09-19-email-and-password-based-authentication-with-expo-and-firebase-part-3-sign-in-forgot-password-and-update-password/"},"frontmatter":{"title":"Email and Password Based Authentication with Expo and Firebase Part 3 - Sign In, Forgot Password, and Update Password"}},"next":null},"pageContext":{"id":"d485587d-6614-58fe-8dd9-f0270231b12f","previousPostId":"bcd9e7ef-a695-598c-8b18-1dd03b2907ae","nextPostId":null}},
    "staticQueryHashes": ["650872877"]}