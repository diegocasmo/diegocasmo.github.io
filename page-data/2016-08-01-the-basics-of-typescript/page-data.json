{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2016-08-01-the-basics-of-typescript/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"9c7afebc-7ed1-596c-a53f-e1491e3ab794","excerpt":"Recently, I started working for a new client who uses TypeScript for both client and server side development. I had previously worked with Coffeescript and…","html":"<p>Recently, I started working for a new client who uses <a href=\"https://www.typescriptlang.org/\">TypeScript</a> for both client and server side development. I had previously worked with <a href=\"http://coffeescript.org/\">Coffeescript</a> and learning how to use TypeScript was something that I was definitely looking forward to do. There has been a lot of buzz about TypeScript in the JavaScript community; <a href=\"https://angular.io/\">Angular 2</a> is actually written in TypeScript (even though you don’t have to use it to write Angular 2 applications).</p>\n<p>In this blogpost, my goal is to give you a brief introduction to TypeScript and hopefully convince you to use it for your next big project.</p>\n<h3>Why TypeScript?</h3>\n<p><a href=\"https://www.typescriptlang.org/\">TypeScript is a typed superset of JavaScript that compiles to plain JavaScript</a> and can be run in any web browser or in a server in a NodeJS application. TypeScript offers support for the latest and evolving JavaScript features, including those from ECMAScript 2015. Since TypeScript is a superset of Javascript, it is extremely similar and it is very easy for JavaScript developers to learn how to use it. Static typing makes code safer as it helps to create applications with fewer bugs, make more predictable code, and most of the time easier to debug. TypeScript also enables faster development as IDEs and text editors that support Typescript allow to examine methods and properties in custom types. As if all of that wasn’t  just enough, the TypeScript compilation step catches all kinds of errors before they reach runtime and break something.</p>\n<h3>Static Typing and Functions</h3>\n<p>TypeScript allows to define the type of variables and functions and the compiler will make sure they aren’t assigned to other types in the application (if you are using and IDE or text editor with support for TypeScript, you will be warned immediately as you are writing your code):</p>\n<h4>Variable declaration example:</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 'dayOfTheWeek' must be of type string</span>\n<span class=\"token keyword\">let</span> dayOfTheWeek<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Monday'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Warning: Assigned expression type number is not assignable to type string</span>\ndayOfTheWeek <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Function declaration example:</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 'sumAllNumbers' takes an array of numbers and must return a number</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumAllNumbers</span><span class=\"token punctuation\">(</span>numbers<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> curr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 'numbers' is an array of numbers</span>\n<span class=\"token keyword\">const</span> numbers<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> totalSum<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token function\">sumAllNumbers</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// TypeScript supports many ES6 features including template literals:</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The total sum is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>totalSum<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The total sum is 6</span></code></pre></div>\n<p>As another option, you can leave out the type declaration and TypeScript will infer it for you and check if any further declaration follow the initial type of the variable. TypeScript types are only useful during development and later on completely removed when compiled to Javascript.</p>\n<h3>Interfaces and Classes</h3>\n<p>TypeScript allows to define interfaces which are the equivalent of a contract of what shape will an object have. Interfaces are useful for defining function parameters, return types, and implementing classes. A class that implements an interface must provide the code for all of the required methods and properties of the interface. Interfaces definition are completely removed when compiled to Javascript; these are only useful in the development stage.</p>\n<p>In the following example, I show a simple snippet of how to use both interfaces and classes with TypeScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Enums are useful for defining a finite</span>\n<span class=\"token comment\">// number of values that can be used</span>\n<span class=\"token keyword\">enum</span> Gender <span class=\"token punctuation\">{</span>Male<span class=\"token punctuation\">,</span> Female<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Whoever uses this interface must implement</span>\n<span class=\"token comment\">// all of its properties and methods</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAnimal</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  gender<span class=\"token operator\">:</span> Gender\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token function-variable function\">whoAmI</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The 'Person' class implements the</span>\n<span class=\"token comment\">// 'IAnimal' interface</span>\n<span class=\"token class-name\"><span class=\"token keyword\">class</span></span> Person <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IAnimal</span> <span class=\"token punctuation\">{</span>\n\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  gender<span class=\"token operator\">:</span> Gender<span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">:</span> Gender<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">whoAmI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Gender<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> aPerson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Diego Castillo'</span><span class=\"token punctuation\">,</span> Gender<span class=\"token punctuation\">.</span>Male<span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naPerson<span class=\"token punctuation\">.</span><span class=\"token function\">whoAmI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Diego Castillo - Male - 24</span></code></pre></div>\n<p>As you might have noticed, the syntax is very similar to classes in ECMAScript 2015, except that types make them more robust.</p>\n<h3>Type Definitions</h3>\n<p>Type definitions are declaration files to make JavaScript libraries compatible with TypeScript. Type definition files have the extension <code class=\"language-text\">.d.ts</code> and mainly consist of interfaces that help the TypeScript compiler type check the application code. These files do not contain any implementation details of the library they define the types for.</p>\n<p><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">DefinitelyType</a> is probably the largest repository of type definitions right now, but there are others such as NPM packages.</p>\n<p>Type definitions can be installed manually, but for larger projects it is recommended to use a type definitions manager tool. A very popular tool for managing type definitions nowadays is <a href=\"https://github.com/typings/typings\">typings</a>. Typings can resolve type definitions to the Typings Registry, GitHub, NPM, Bower, HTTP and local files. Here’s a quick example of how to use the typings library:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Search for the type definitions of a particular library</span>\ntypings search react-dom\n\n<span class=\"token comment\"># Install one of the definitions found (dt = DefinitelyType)</span>\ntypings <span class=\"token function\">install</span> --global --save dt~react-dom</code></pre></div>\n<p>As you can see, installing and managing type definitions is very easy and similar to managing packages with NPM.</p>\n<h3>Conclusion</h3>\n<p>I hope this short blogpost has given you enough information to be excited about trying out TypeScript. I expect TypeScript usage to keep increasing, as current large and complex applications need more tools like this which enforce developers to follow consistent rules all across an application. Finally, I you are interested in learning more about TypeScript, I highly recommend the course\n<a href=\"https://www.pluralsight.com/courses/typescript-in-depth\">TypeScript In-depth</a> from Pluralsight (this course has been incredible helpful to me while learning more about TypeScript).</p>","frontmatter":{"title":"The Basics of TypeScript","date":"August 01, 2016","description":null}},"previous":{"fields":{"slug":"/2016-03-07-an-introduction-to-data-mining/"},"frontmatter":{"title":"An Introduction to Data Mining"}},"next":{"fields":{"slug":"/2016-08-22-virtual-box-ssh-shared-folders-tutorial/"},"frontmatter":{"title":"VirtualBox Shared Folders + SSH from OSX Host to Ubuntu Server Guest Tutorial"}}},"pageContext":{"id":"9c7afebc-7ed1-596c-a53f-e1491e3ab794","previousPostId":"fe812470-63cf-567f-92ce-5e92ef39dcfb","nextPostId":"83a74260-b56e-5a10-b817-812e25956e97"}},
    "staticQueryHashes": ["650872877"]}