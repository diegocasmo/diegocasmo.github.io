{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2020-10-18-create-a-simple-react-timer-component/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"fabaaa6e-da1a-5cfb-930c-6cded3d20ce1","excerpt":"I have recently been developing a workout application during my spare time. One of the requirements I set for it was to create a timer so that users could keep…","html":"<p>I have recently been developing a workout application during my spare time. One of the requirements I set for it was to create a timer so that users could keep track of their workouts. The primary goal was to build a timer which featured a way to “play”, “pause”, and “stop” a workout. Additionally, it would need to store enough information so that questions such as “How much time did the user take to complete the exercise?” or “How much time did it take to complete the entire workout?” could be answered.</p>\n<p>In this blog post, I will explain a simple implementation of a timer component in React that can be extended to answer the aforementioned questions. At the end, there are links to a CodeSandbox demo and the GitHub repository of the code.</p>\n<h2>The Plan 💡</h2>\n<p>The main idea was to create an entity which would allow to store all the information that is needed. This entity would store when it started,  paused, and for how much time it ran. Let’s call this entity a “time entry” and define it as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">startedAt</span><span class=\"token operator\">:</span> Integer<span class=\"token punctuation\">,</span> <span class=\"token comment\">// The # of elapsed ms since the unix epoch</span>\n  <span class=\"token literal-property property\">elapsedMs</span><span class=\"token operator\">:</span> Integer <span class=\"token comment\">// If paused, the # of ms this time entry ran</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A workout would then be defined as a list of time entries. In other words, each time the user started the timer, it would initialize a time entry and set <code class=\"language-text\">startedAt</code> to “now”. It would keep running unless paused, in which case the number of elapsed milliseconds since it was started would be computed and stored in <code class=\"language-text\">elaspedMs</code>. If the timer is started again, then a new time entry would be created. Finally, computing the total elapsed time would simply require adding up all the time entries’ <code class=\"language-text\">elapsedMs</code> .</p>\n<h2>The Timer Reducer ⚒️</h2>\n<p>Let’s go ahead and implement it using <a href=\"https://github.com/facebook/create-react-app\">CRA</a> to simplify the process. Run <code class=\"language-text\">npx create-react-app react-timer-app</code> to create the application.</p>\n<p>I’ll be using the ”<a href=\"https://kentcdodds.com/blog/the-state-reducer-pattern-with-react-hooks\">State Reducer Pattern</a>” as explained by Kent C. Dodds. Let’s start by defining a simple skeleton of the timer reducer, the actions the user will be allowed to perform, and the <code class=\"language-text\">useTimer</code> hook in <code class=\"language-text\">App.js</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> actionTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">tick</span><span class=\"token operator\">:</span> <span class=\"token string\">'tick'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">play</span><span class=\"token operator\">:</span> <span class=\"token string\">'play'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">pause</span><span class=\"token operator\">:</span> <span class=\"token string\">'pause'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">stop</span><span class=\"token operator\">:</span> <span class=\"token string\">'stop'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">tick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">timeEntries</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timerReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> actionTypes<span class=\"token punctuation\">.</span>tick<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n    <span class=\"token keyword\">case</span> actionTypes<span class=\"token punctuation\">.</span>play<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n    <span class=\"token keyword\">case</span> actionTypes<span class=\"token punctuation\">.</span>pause<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n    <span class=\"token keyword\">case</span> actionTypes<span class=\"token punctuation\">.</span>stop<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTimer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>timerReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Timer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Timer</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>The <code class=\"language-text\">tick</code> Action</h3>\n<p>The <code class=\"language-text\">tick</code> action will be used to re-render the <code class=\"language-text\">&lt;Timer/></code> component every second. To do this, the component will use the <code class=\"language-text\">useInterval</code> hook as implemented by Dan Abramov in <a href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks/\">this blog post</a> . Every second, this action will be fired with “now” (the number of milliseconds since the unix epoch) as its payload. The payload is then assigned to the <code class=\"language-text\">tick</code> property of the timer reducer’s state.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">case</span> actionTypes<span class=\"token punctuation\">.</span>tick<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tick</span><span class=\"token operator\">:</span> payload <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// The number of ms since the unix epoch (a.k.a. \"now\")</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">now</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTimer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>timerReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> actionTypes<span class=\"token punctuation\">.</span>tick<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    tick<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Timer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tick <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>The <code class=\"language-text\">play</code> Action</h3>\n<p>The <code class=\"language-text\">play</code> action is in charge of starting the timer at “now”. Before implementing this action, there are a few utility functions that will need to be defined, though.</p>\n<p>First, let’s add these functions which will make it easier to deal with a time entry. These will help to create, stop, and easily determine a time entry’s “status”:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Create a new time entry starting \"now\" by default</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">startTimeEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time <span class=\"token operator\">=</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">startedAt</span><span class=\"token operator\">:</span> time<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">elapsedMs</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Stop the given time entry at \"now\" by default</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopTimeEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">timeEntry<span class=\"token punctuation\">,</span> time <span class=\"token operator\">=</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>timeEntry<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">elapsedMs</span><span class=\"token operator\">:</span> time <span class=\"token operator\">-</span> timeEntry<span class=\"token punctuation\">.</span>startedAt<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Return true if a time entry is running, false otherwise</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTimeEntryRunning</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> elapsedMs <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> elapsedMs <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token comment\">// Return true if a time entry is paused, false otherwise</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTimeEntryPaused</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> elapsedMs <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> elapsedMs <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span></code></pre></div>\n<p>Next, let’s define some more utility functions, but this time to help derive information from the <code class=\"language-text\">useTimer</code> hook state (a.k.a. “selectors”):</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Get the current time entry, which is always the latest one</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCurrTimeEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  state<span class=\"token punctuation\">.</span>timeEntries<span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">.</span>timeEntries<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// Return true if the timer is stopped, false otherwise</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isStopped</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>timeEntries<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\">// Return true if the timer is running, false otherwise</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isRunning</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  state<span class=\"token punctuation\">.</span>timeEntries<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isTimeEntryRunning</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCurrTimeEntry</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Return true if the timer is paused, false otherwise</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isPaused</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  state<span class=\"token punctuation\">.</span>timeEntries<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isTimeEntryPaused</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCurrTimeEntry</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Return the total number of elapsed ms</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getElapsedMs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isStopped</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>timeEntries<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> timeEntry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">isTimeEntryPaused</span><span class=\"token punctuation\">(</span>timeEntry<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">?</span> acc <span class=\"token operator\">+</span> timeEntry<span class=\"token punctuation\">.</span>elapsedMs\n        <span class=\"token operator\">:</span> acc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> timeEntry<span class=\"token punctuation\">.</span>startedAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These methods will make it easy to know what is the current time entry, if the timer is running, paused, or stopped, and how much time has passed since it was started.</p>\n<p>Alright, those were a lot of utility functions! Let’s focus in the <code class=\"language-text\">play</code> action implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">case</span> actionTypes<span class=\"token punctuation\">.</span>play<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> state\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">timeEntries</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>timeEntries<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">startTimeEntry</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">play</code> action can only be executed if the timer isn’t currently running, thus the state is returned as it’s unless that’s the case. Otherwise, a new time entry is “started” (created) and added to the list of time entries.</p>\n<h3>The <code class=\"language-text\">pause</code> Action</h3>\n<p>The <code class=\"language-text\">pause</code> action can only be executed if timer is running. It will find the currently running time entry (the last one), and compute the number of elapsed milliseconds since it started until now (i.e., how much time it ran for). Here’s the implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">case</span> actionTypes<span class=\"token punctuation\">.</span>pause<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isStopped</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> state\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPaused</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> state\n\n  <span class=\"token keyword\">const</span> currTimeEntry <span class=\"token operator\">=</span> <span class=\"token function\">getCurrTimeEntry</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">timeEntries</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>timeEntries\n      <span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">stopTimeEntry</span><span class=\"token punctuation\">(</span>currTimeEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>The <code class=\"language-text\">stop</code> Action</h3>\n<p>The <code class=\"language-text\">stop</code> action removes all the existing time entries to stop the timer and can be executed at any time. Its implementation is straightforward:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">case</span> actionTypes<span class=\"token punctuation\">.</span>stop<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">timeEntries</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>The <code class=\"language-text\">useTimer</code> Hook</h2>\n<p>Now that the timer reducer has been implemented, the <code class=\"language-text\">useTimer</code> hook will expose its API to consumers as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTimer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>timerReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pause</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> actionTypes<span class=\"token punctuation\">.</span>pause<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">play</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> actionTypes<span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> actionTypes<span class=\"token punctuation\">.</span>stop <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> actionTypes<span class=\"token punctuation\">.</span>tick<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> running <span class=\"token operator\">=</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> elapsedMs <span class=\"token operator\">=</span> <span class=\"token function\">getElapsedMs</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    pause<span class=\"token punctuation\">,</span>\n    play<span class=\"token punctuation\">,</span>\n    running<span class=\"token punctuation\">,</span>\n    stop<span class=\"token punctuation\">,</span>\n    tick<span class=\"token punctuation\">,</span>\n    elapsedMs<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">useTimer</code> consumer is the <code class=\"language-text\">&lt;Timer/></code> component, and its implementation could look like this (very simplified and with no styles whatsoever for brevity):</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Timer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pause<span class=\"token punctuation\">,</span> play<span class=\"token punctuation\">,</span> running<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">,</span> tick<span class=\"token punctuation\">,</span> elapsedMs <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">zeroPad</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">0</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> seconds <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>elapsedMs <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> minutes <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>elapsedMs <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> hours <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>elapsedMs <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token function\">zeroPad</span><span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token punctuation\">{</span><span class=\"token function\">zeroPad</span><span class=\"token punctuation\">(</span>minutes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token punctuation\">{</span><span class=\"token function\">zeroPad</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>running <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pause<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">pause</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>play<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">play</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>stop<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">stop</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion 🤝</h2>\n<p>Alright, that was a bit longer than I anticipated. The idea of using time entries to store the timer’s state can be extended to include more information in each time entry, and thus be able to answer questions such as the ones I posted in the introduction. There’s a <a href=\"https://codesandbox.io/s/react-timer-app-siyh4\">CodeSandbox demo</a> of the <code class=\"language-text\">&lt;Timer/></code> component and also a <a href=\"https://github.com/diegocasmo/react-timer-app\">GitHub repo</a> with all the code needed. Post a comment below if you have a question or idea to share 🙂.</p>","fileAbsolutePath":"/Users/diego/diegocasmo/diegocasmo.github.io/content/blog/2020-10-18-create-a-simple-react-timer-component.md","frontmatter":{"title":"Create a Simple React Timer Component","date":"October 18, 2020","description":null}},"previous":{"fields":{"slug":"/2019-08-19-using-postgres-enum-type-in-rails/"},"frontmatter":{"title":"Using Postgres Enum Type in Rails"}},"next":{"fields":{"slug":"/2021-08-29-email-and-password-based-authentication-with-expo-and-firebase-part-1-project-setup/"},"frontmatter":{"title":"Email and Password Based Authentication with Expo and Firebase Part 1 - Project Setup"}}},"pageContext":{"id":"fabaaa6e-da1a-5cfb-930c-6cded3d20ce1","previousPostId":"119b8e16-39c4-5171-a800-07e9b2ab34e3","nextPostId":"014e74ae-f68a-568a-8c74-672008760a71"}},
    "staticQueryHashes": ["650872877"]}