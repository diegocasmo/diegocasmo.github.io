{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-08-12-using-active-support-concerns-to-encapsulate-data-access-and-validation/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"35f12f91-d061-5df3-9376-cc0e1c8a993d","excerpt":"Recently, I had to implement a feature that introduced the concept of currency to an API. Users of the API could create different type of resources, and each of…","html":"<p>Recently, I had to implement a feature that introduced the concept of currency to an API. Users of the API could create different type of resources, and each of these resources needed to know the type of currency being used. For instance, a user could create a <code class=\"language-text\">Payment</code> in USD, or request a <code class=\"language-text\">Withdrawal</code> in AUD.</p>\n<p>In this short blog post, my goal is to explain how I used <code class=\"language-text\">ActiveSupport::Concern</code> to encapsulate and group together all data access and validation of the <code class=\"language-text\">currency</code> attribute in a single place.</p>\n<h3>The Gist</h3>\n<p>I wanted currency to be an <code class=\"language-text\">enum</code> where each value was a <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">currency code</a>. Using <code class=\"language-text\">enum</code> allows to write queries by name, such as <code class=\"language-text\">Payment.first.currency.GBP?</code> or <code class=\"language-text\">Payment.where(currency: :AUD)</code>. If such logic was only needed in a single model, I would have probably done the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Payment</span> <span class=\"token operator\">&lt;</span> ApplicationRecord\n  enum currency<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token symbol\">USD</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">AUD</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">GBP</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n  validates <span class=\"token symbol\">:currency</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">inclusion</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token symbol\">in</span><span class=\"token operator\">:</span> currencies<span class=\"token punctuation\">.</span>keys <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Nonetheless, the same notion of currency needed to exist in multiple models. To solve this, I chose to use <code class=\"language-text\">ActiveSupport::Concern</code> in order to DRY the models and group related concerns of logic together. As described by DHH in <a href=\"https://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns\">this blog post in 2012</a>, <code class=\"language-text\">ActiveSupport::Concern</code> “encapsulate[s] both data access and domain logic about a certain slice of responsibility.”</p>\n<h3>The Solution</h3>\n<p>To implement the desired solution, I created a <code class=\"language-text\">Currency</code> module in <code class=\"language-text\">app/models/concerns/currency.rb</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">Currency</span>\n  <span class=\"token keyword\">extend</span> ActiveSupport<span class=\"token double-colon punctuation\">::</span>Concern\n  <span class=\"token keyword\">include</span> ActiveModel<span class=\"token double-colon punctuation\">::</span>Validations\n\n  included <span class=\"token keyword\">do</span>\n    enum currency<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token symbol\">USD</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">AUD</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">GBP</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n    validates <span class=\"token symbol\">:currency</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">inclusion</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token symbol\">in</span><span class=\"token operator\">:</span> currencies<span class=\"token punctuation\">.</span>keys <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The <code class=\"language-text\">included</code> method takes a block, and it is executed at any time a module is included in another module or class. In this case, the <code class=\"language-text\">currency</code> module  defines an <code class=\"language-text\">enum</code> attribute which specifies a named value for each currency. It also validates the <code class=\"language-text\">currency</code> attribute is set to one of the values defined in the <code class=\"language-text\">enum</code>. To use the concern, simply include it:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Payment</span> <span class=\"token operator\">&lt;</span> ApplicationRecord\n  <span class=\"token keyword\">include</span> Currency\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Withdrawal</span> <span class=\"token operator\">&lt;</span> ApplicationRecord\n  <span class=\"token keyword\">include</span> Currency\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>And that is it! The <code class=\"language-text\">Payment</code> and <code class=\"language-text\">Withdrawal</code> models now define how to access and validate the <code class=\"language-text\">currency</code> attribute (assuming a migration for the <code class=\"language-text\">currency</code> column was created and ran appropriately in each table).</p>\n<h3>Testing</h3>\n<p>Testing shared behavior of classes or modules can be greatly simplified by using <code class=\"language-text\">rspec</code>’s shared examples. In <code class=\"language-text\">spec/support/shared_examples/currency_spec.rb</code> I defined a shared example (note that I’m using the <code class=\"language-text\">shoulda-matchers</code> gem):</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">shared_examples_for <span class=\"token string-literal\"><span class=\"token string\">'currency'</span></span> <span class=\"token keyword\">do</span>\n  let<span class=\"token punctuation\">(</span><span class=\"token symbol\">:model</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> described_class <span class=\"token punctuation\">}</span>\n\n  it <span class=\"token punctuation\">{</span> should define_enum_for<span class=\"token punctuation\">(</span><span class=\"token symbol\">:currency</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>with_values<span class=\"token punctuation\">(</span><span class=\"token symbol\">USD</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">AUD</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">GBP</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  it <span class=\"token punctuation\">{</span> should allow_values<span class=\"token punctuation\">(</span><span class=\"token symbol\">:USD</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:AUD</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:GBP</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:currency</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>To use it, just include the shared example in the models context:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">RSpec<span class=\"token punctuation\">.</span>describe Payment<span class=\"token punctuation\">,</span> <span class=\"token symbol\">type</span><span class=\"token operator\">:</span> <span class=\"token symbol\">:model</span> <span class=\"token keyword\">do</span>\n  it_behaves_like <span class=\"token string-literal\"><span class=\"token string\">'currency'</span></span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">RSpec<span class=\"token punctuation\">.</span>describe Withdrawal<span class=\"token punctuation\">,</span> <span class=\"token symbol\">type</span><span class=\"token operator\">:</span> <span class=\"token symbol\">:model</span> <span class=\"token keyword\">do</span>\n  it_behaves_like <span class=\"token string-literal\"><span class=\"token string\">'currency'</span></span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Done! Models that include the concern can easily test its functionality by using a shared example as described above.</p>\n<h3>Conclusion</h3>\n<p>In this short blog post, I have shown a simple solution to encapsulate and group together data access and validation of an attribute. Note I have chosen to use <code class=\"language-text\">ActiveSupport::Concern</code> because the same attribute is used by many models. If the <code class=\"language-text\">currency</code> attribute was only used by a single model, I would not have defined a concern for it. Finally, I have demonstrated how to use <code class=\"language-text\">rspec</code>’s shared examples to simplify testing shared behavior of classes or modules.</p>\n<p>Have you ever implemented something similar? How did you do it? Let me know in a comment below :).</p>","frontmatter":{"title":"Using Active Support Concerns to Encapsulate Data Access and Validation","date":"August 12, 2019","description":null}},"previous":{"fields":{"slug":"/2019-08-11-okrs-as-a-framework-for-personal-growth/"},"frontmatter":{"title":"OKRs as a Framework for Personal Growth"}},"next":{"fields":{"slug":"/2019-08-19-using-postgres-enum-type-in-rails/"},"frontmatter":{"title":"Using Postgres Enum Type in Rails"}}},"pageContext":{"id":"35f12f91-d061-5df3-9376-cc0e1c8a993d","previousPostId":"0c059681-70eb-589a-9a34-0e265d7d1528","nextPostId":"5ef66f83-c13d-5d6f-82e4-42733f5eabdc"}},
    "staticQueryHashes": ["650872877"]}