{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2024-10-07-simple-next.js-magic-link-jwt-authentication-with-prisma-postgresql-and-resend/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"790f6137-54ec-5cb4-8db4-bd0de73469f1","excerpt":"When building web applications, authentication is almost always a core requirement. I needed something simple and secure that would let me get started quickly…","html":"<p>When building web applications, authentication is almost always a core requirement. I needed something simple and secure that would let me get started quickly on new projects without over-complicating the setup. My goal was to have a solution that’s easy to implement, handles email verification out of the box, and just works. In this post, I’m sharing how to build a straightforward magic link authentication system using <a href=\"https://nextjs.org/\">Next.js</a>, <a href=\"https://authjs.dev/\">Auth.js</a>, <a href=\"https://www.prisma.io/\">Prisma</a>, <a href=\"https://www.postgresql.org/\">PostgreSQL</a>, and <a href=\"https://resend.com/home\">Resend</a>. It’s a powerful yet simple solution that accomplishes exactly what I needed, and I hope it’ll be useful for your projects too.</p>\n<p>You can find the starter kit, which implements the setup described in this blog post, in the following <a href=\"https://github.com/diegocasmo/nextjs-magic-link-auth\">GitHub repository</a>.</p>\n<h2>Getting Started</h2>\n<h3>Installing Dependencies</h3>\n<p>To get started, initialize a new Next.js app:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx create-next-app@latest</code></pre></div>\n<p>For this setup, I’ve configured the new app named <code class=\"language-text\">nextjs-magic-link-auth</code> to use TypeScript, ESLint, Tailwind, a <code class=\"language-text\">/src</code> directory, the App Router, and a custom import alias <code class=\"language-text\">@/*</code> for cleaner imports.</p>\n<h3>Prisma Setup</h3>\n<p>The next step is to set up the Prisma ORM and connect it to the database. I’ve chosen PostgreSQL for its strong support for relational data, ease of integration with Prisma, and reliability for production use.</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">cd nextjs-magic-link-auth\nyarn add @prisma/client\nyarn add prisma --dev</code></pre></div>\n<p>Once Prisma is installed, initialize it and create a <code class=\"language-text\">schema.prisma</code> file by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> prisma init</code></pre></div>\n<p>Next, set up the <code class=\"language-text\">DATABASE_URL</code> in your <code class=\"language-text\">.env</code> file (i.e., <code class=\"language-text\">touch .env</code>). Make sure to replace <code class=\"language-text\">&lt;username></code>, <code class=\"language-text\">&lt;password></code>, and <code class=\"language-text\">&lt;db_name></code> with your actual database credentials:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">DATABASE_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"postgresql://&lt;username>:&lt;password>@localhost:5432/&lt;db_name>?schema=public\"</span></code></pre></div>\n<p>Now, update the <code class=\"language-text\">schema.prisma</code> file to define the tables and columns needed for email magic link authentication. For this example, I’ve only added the essentials, but you might want to refer to the <a href=\"https://authjs.dev/getting-started/adapters/prisma\">Auth.js Prisma documentation</a> to tailor it to your needs.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">generator client <span class=\"token punctuation\">{</span>\n  provider <span class=\"token operator\">=</span> <span class=\"token string\">\"prisma-client-js\"</span>\n<span class=\"token punctuation\">}</span>\n\ndatasource db <span class=\"token punctuation\">{</span>\n  provider <span class=\"token operator\">=</span> <span class=\"token string\">\"postgresql\"</span>\n  url      <span class=\"token operator\">=</span> env<span class=\"token punctuation\">(</span><span class=\"token string\">\"DATABASE_URL\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodel User <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">id</span>            String    @id @default<span class=\"token punctuation\">(</span>cuid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n  email         String    @unique\n  emailVerified DateTime? @map<span class=\"token punctuation\">(</span><span class=\"token string\">\"email_verified\"</span><span class=\"token punctuation\">)</span>\n  createdAt     DateTime  @default<span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> @map<span class=\"token punctuation\">(</span><span class=\"token string\">\"created_at\"</span><span class=\"token punctuation\">)</span>\n  updatedAt     DateTime? @updatedAt @map<span class=\"token punctuation\">(</span><span class=\"token string\">\"updated_at\"</span><span class=\"token punctuation\">)</span>\n\n  @@index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>email<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  @@map<span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodel VerificationToken <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">id</span>         String    @id @default<span class=\"token punctuation\">(</span>cuid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n  identifier String\n  token      String    @unique\n  expires    DateTime\n  createdAt  DateTime  @default<span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> @map<span class=\"token punctuation\">(</span><span class=\"token string\">\"created_at\"</span><span class=\"token punctuation\">)</span>\n  updatedAt  DateTime? @updatedAt @map<span class=\"token punctuation\">(</span><span class=\"token string\">\"updated_at\"</span><span class=\"token punctuation\">)</span>\n\n  @@unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>identifier, token<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  @@map<span class=\"token punctuation\">(</span><span class=\"token string\">\"verification_tokens\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After updating the <code class=\"language-text\">schema.prisma</code> file, run the following commands to create the migration and apply the changes to your database. This ensures that your schema is correctly set up:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> prisma migrate dev <span class=\"token parameter variable\">--name</span> init</code></pre></div>\n<p>The <code class=\"language-text\">migrate dev</code> command will create a new migration file in the <code class=\"language-text\">prisma/migrations</code> directory, allowing you to track changes to your schema over time.</p>\n<p>Once the migration is complete, create a new file called <code class=\"language-text\">prisma.ts</code> in your <code class=\"language-text\">src/lib</code> directory to configure the Prisma client:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> src/lib\n<span class=\"token function\">touch</span> src/lib/prisma.ts</code></pre></div>\n<p>Add the following code to <code class=\"language-text\">prisma.ts</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@prisma/client\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> globalForPrisma <span class=\"token operator\">=</span> globalThis <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span> prisma<span class=\"token operator\">:</span> PrismaClient <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> prisma <span class=\"token operator\">=</span> globalForPrisma<span class=\"token punctuation\">.</span>prisma <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrismaClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">)</span> globalForPrisma<span class=\"token punctuation\">.</span>prisma <span class=\"token operator\">=</span> prisma<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code creates a single instance of <code class=\"language-text\">PrismaClient</code> and attaches it to the global object when not in production to avoid multiple client instances during development. In production, the client is not stored on the global object (<code class=\"language-text\">globalForPrisma</code>), meaning each module that imports <code class=\"language-text\">prisma</code> will use a fresh instance from <code class=\"language-text\">new PrismaClient()</code>.</p>\n<h3>Configure the Resend Provider with Prisma</h3>\n<p>Once Prisma is set up, it’s time to integrate it with <a href=\"https://resend.com/\">Resend</a>. If you don’t have a Resend account yet, start by creating one and generating an API key. Save this API key in your <code class=\"language-text\">.env</code> file as <code class=\"language-text\">AUTH_RESEND_KEY</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">AUTH_RESEND_KEY</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>your-resend-api-key<span class=\"token operator\">></span></code></pre></div>\n<p>Next, install Auth.js and its Prisma adapter by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> next-auth@beta @auth/prisma-adapter</code></pre></div>\n<p>After installing these dependencies, add the <code class=\"language-text\">AUTH_SECRET</code> environment variable to your <code class=\"language-text\">.env</code> file. You can generate a random secret by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl rand <span class=\"token parameter variable\">-base64</span> <span class=\"token number\">32</span></code></pre></div>\n<p>This <code class=\"language-text\">AUTH_SECRET</code> is used by Auth.js to encrypt tokens and email verification hashes securely.</p>\n<p>Now, it’s time to set up the Auth.js configuration. Create a folder and file to hold the configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> src/lib/auth\n<span class=\"token function\">touch</span> src/lib/auth/index.ts</code></pre></div>\n<p>Fill in <code class=\"language-text\">src/lib/auth/index.ts</code> with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> NextAuth <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> NextAuthConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaAdapter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@auth/prisma-adapter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> prisma <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/lib/prisma\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Resend <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth/providers/resend\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authOptions<span class=\"token operator\">:</span> NextAuthConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  adapter<span class=\"token operator\">:</span> <span class=\"token function\">PrismaAdapter</span><span class=\"token punctuation\">(</span>prisma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">Resend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      from<span class=\"token operator\">:</span> <span class=\"token string\">\"onboarding@resend.dev\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  session<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    strategy<span class=\"token operator\">:</span> <span class=\"token string\">\"jwt\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> handlers<span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> signIn<span class=\"token punctuation\">,</span> signOut <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">NextAuth</span><span class=\"token punctuation\">(</span>authOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, add the route handler for Auth.js under <code class=\"language-text\">src/app/api/auth/[...nextauth]/route.ts</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">mkdir <span class=\"token operator\">-</span>p src<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>auth<span class=\"token operator\">/</span>\\<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>nextauth\\<span class=\"token punctuation\">]</span>\ntouch src<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>auth<span class=\"token operator\">/</span>\\<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>nextauth\\<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>route<span class=\"token punctuation\">.</span>ts</code></pre></div>\n<p>Fill it in with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> handlers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/lib/auth\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">POST</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> handlers<span class=\"token punctuation\">;</span></code></pre></div>\n<p>And that’s it! Run <code class=\"language-text\">yarn dev</code>, then head over to <a href=\"http://localhost:3000/api/auth/signin\"><code class=\"language-text\">http://localhost:3000/api/auth/signin</code></a> to sign in using your email. Check your inbox for the sign-in email, click on the link provided, and you’ll be signed in.</p>\n<p>I’ve also included a <a href=\"https://github.com/diegocasmo/nextjs-magic-link-auth\">GitHub repository</a> that showcases the implementation of this setup.</p>\n<h2>Conclusion and Further Improvements</h2>\n<p>This simple magic link authentication system with Next.js, Prisma, and Resend provides a solid foundation for secure and easy-to-implement authentication. To further enhance this setup, consider the following improvements:</p>\n<ul>\n<li>Secure sensitive routes using Next.js middleware to prevent unauthorized access (<a href=\"https://authjs.dev/getting-started/session-management/protecting\">read more here</a>).</li>\n<li>Log emails to the console locally instead of sending them in a development environment to avoid unnecessary Resend API calls:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">  <span class=\"token keyword\">return</span> <span class=\"token function\">Resend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    from<span class=\"token operator\">:</span> <span class=\"token string\">\"onboarding@resend.dev\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Send email verification requests to the console in development to avoid</span>\n    <span class=\"token comment\">// spamming the Resend API</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"development\"</span>\n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function-variable function\">sendVerificationRequest</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> identifier<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> provider <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n----------------------------------\nFrom: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>provider<span class=\"token punctuation\">.</span>from<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\nTo: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>identifier<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\nSubject: Sign in to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n\nSign in URL:\n\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n----------------------------------\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Implement rate limiting to prevent potential abuse by limiting the number of sign-in requests within a specified timeframe (<a href=\"https://vercel.com/guides/rate-limiting-edge-middleware-vercel-kv\">read more here</a>).</li>\n</ul>\n<p>These additions will help make the authentication flow more robust and production-ready while maintaining a simple codebase.</p>","frontmatter":{"title":"Simple Next.js Magic Link JWT Authentication with Prisma, PostgreSQL, and Resend","date":"October 07, 2024","description":null}},"previous":{"fields":{"slug":"/2024-10-06-our-most-valuable-asset/"},"frontmatter":{"title":"Our Most Valuable Asset"}},"next":{"fields":{"slug":"/2025-08-05-reducing-type-overhead-with-lazy-evaluation-in-typescript/"},"frontmatter":{"title":"Reducing Type Overhead with Lazy Evaluation in TypeScript"}}},"pageContext":{"id":"790f6137-54ec-5cb4-8db4-bd0de73469f1","previousPostId":"3fb7a40b-fc2c-5804-adbc-a2e0240cf8a6","nextPostId":"827c3f43-f5c8-54fd-81a6-94008c2f7120"}},
    "staticQueryHashes": ["650872877"]}