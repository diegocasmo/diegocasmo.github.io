{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-08-19-using-postgres-enum-type-in-rails/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"5ef66f83-c13d-5d6f-82e4-42733f5eabdc","excerpt":"Last week I wrote Using Active Support Concerns to Encapsulate Data Access and Validation, where I explained how to use Active Support concerns to define data…","html":"<p>Last week I wrote <a href=\"https://dev.to/diegocasmo/using-active-support-concerns-to-encapsulate-data-access-and-validation-5b6c\">Using Active Support Concerns to Encapsulate Data Access and Validation</a>, where I explained how to use Active Support concerns to define data access and validation rules for an Active Record enum attribute. The attribute mapped values to integers in the database, similar to this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Project</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n  enum status<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token symbol\">:active</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:archived</span> <span class=\"token punctuation\">]</span>\n  validates <span class=\"token symbol\">:status</span><span class=\"token punctuation\">,</span> inclusion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> statuses<span class=\"token punctuation\">.</span>keys <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Depending on the problem that you are trying to solve, this approach could potentially lead to several drawbacks including:</p>\n<ol>\n<li>Meaningless integer values stored in the database.</li>\n<li>Unless the integer value is “limited” in a migration, Active Model validations can be by-passed through plain SQL, effectively allowing the attribute to be set to any integer.</li>\n<li>Plain SQL queries need to use the integer value, not the Active Record enum.</li>\n</ol>\n<p>In this blog post, I’ll show how to use the Postgres enum type with Rails to avoid the aforementioned pit falls.</p>\n<h3>Postgres Enumerated Types</h3>\n<p>Postgres supports enumerated types, which are data types that comprise a static, ordered set of values. To create an enum type, use the Postgres <code class=\"language-text\">CREATE TYPE</code> command. In a Rails project, generate a migration as follows <code class=\"language-text\">rails g migration AddStatusToProjects</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AddStatusToProjects</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Migration</span><span class=\"token punctuation\">[</span><span class=\"token number\">5.2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">up</span></span>\n    execute <span class=\"token string heredoc-string\"><span class=\"token delimiter symbol\"><span class=\"token punctuation\">&lt;&lt;-</span>SQL</span>\n      CREATE TYPE project_status AS ENUM ('active', 'archived');\n    <span class=\"token delimiter symbol\">SQL</span></span>\n    add_column <span class=\"token symbol\">:projects</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:status</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:project_status</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">down</span></span>\n    remove_column <span class=\"token symbol\">:projects</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:status</span>\n    execute <span class=\"token string heredoc-string\"><span class=\"token delimiter symbol\"><span class=\"token punctuation\">&lt;&lt;-</span>SQL</span>\n      DROP TYPE project_status;\n    <span class=\"token delimiter symbol\">SQL</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The migration creates a <code class=\"language-text\">project_status</code> enumerated type. Next, it adds a <code class=\"language-text\">status</code> column to the <code class=\"language-text\">projects</code> table of type <code class=\"language-text\">project_status</code>. By using the Postgres enumerated type, the <code class=\"language-text\">status</code> attribute is constrain at the database level to be one of <code class=\"language-text\">active</code>|<code class=\"language-text\">archived</code>. Lastly, set <code class=\"language-text\">config.active_record.schema_format = :sql</code> in the environment configuration files, so that the database schema includes the <code class=\"language-text\">project_status</code> enumerated type definition.</p>\n<h3>Active Record Enum</h3>\n<p>The initial definition of the <code class=\"language-text\">status</code> Active Record enum needs to be slightly modified. Simply use a hash to explicitly map the relation between the attribute and database value as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Project</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n  enum status<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> active<span class=\"token punctuation\">:</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> archived<span class=\"token punctuation\">:</span> <span class=\"token string\">'archived'</span> <span class=\"token punctuation\">}</span>\n  validates <span class=\"token symbol\">:status</span><span class=\"token punctuation\">,</span> inclusion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> statuses<span class=\"token punctuation\">.</span>keys <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Unit Tests</h3>\n<p>Unit tests can be tremendously simplified by using the <code class=\"language-text\">shoulda-matchers</code> gem:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">RSpec</span><span class=\"token punctuation\">.</span>describe <span class=\"token constant\">Project</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:model</span> <span class=\"token keyword\">do</span>\n  it <span class=\"token punctuation\">{</span> should define_enum_for<span class=\"token punctuation\">(</span><span class=\"token symbol\">:status</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n      with_values<span class=\"token punctuation\">(</span>\n        active<span class=\"token punctuation\">:</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span>\n        archived<span class=\"token punctuation\">:</span> <span class=\"token string\">'archived'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>backed_by_column_of_type<span class=\"token punctuation\">(</span><span class=\"token symbol\">:enum</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n  it <span class=\"token punctuation\">{</span> should allow_values<span class=\"token punctuation\">(</span><span class=\"token symbol\">:active</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:archived</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The first unit test verifies the <code class=\"language-text\">status</code> column is defined in the <code class=\"language-text\">Project</code> model and its column type is <code class=\"language-text\">enum</code>. Also, it makes sure the <code class=\"language-text\">status</code> enum values are correctly defined as specified in the <code class=\"language-text\">status</code> hash. Finally, the last test confirms the <code class=\"language-text\">Project</code> model allows the <code class=\"language-text\">status</code> attribute to be set using the <code class=\"language-text\">:active</code> and <code class=\"language-text\">:archived</code> symbols.</p>\n<h3>Conclusion</h3>\n<p>And that was it! The <code class=\"language-text\">Project</code> model defines and validates an enum for the <code class=\"language-text\">status</code> attribute which is mapped to meaningful string values in the database. Additionally, the <code class=\"language-text\">status</code> column is constrain at the database level to be one of the specified values in the Postgres enumerated type.</p>\n<p>If you are interested in learning more about enum in Rails, I highly recommend reading <a href=\"https://naturaily.com/blog/ruby-on-rails-enum\">Ruby on Rails - how to create perfect enum in 5 steps</a>. This blog post, written by Błażej Pichur, has been a fantastic guide during the past few weeks to improve my understanding and usage of enum in Rails.</p>","frontmatter":{"title":"Using Postgres Enum Type in Rails","date":"August 19, 2019","description":null}},"previous":{"fields":{"slug":"/2019-08-12-using-active-support-concerns-to-encapsulate-data-access-and-validation/"},"frontmatter":{"title":"Using Active Support Concerns to Encapsulate Data Access and Validation"}},"next":{"fields":{"slug":"/2020-10-18-create-a-simple-react-timer-component/"},"frontmatter":{"title":"Create a Simple React <Timer/> Component"}}},"pageContext":{"id":"5ef66f83-c13d-5d6f-82e4-42733f5eabdc","previousPostId":"35f12f91-d061-5df3-9376-cc0e1c8a993d","nextPostId":"c6cb5961-64c5-5215-94ae-b057947f6e13"}},
    "staticQueryHashes": ["650872877"]}