{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-12-19-api-using-axios-react-query/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Diego Castillo"}},"markdownRemark":{"id":"c67e7404-4407-5002-b252-86aa726c092c","excerpt":"At Remote, Axios and React Query are used to build the “data layer” and interact with API endpoints. The combination of these two libraries allows us to easily…","html":"<p>At <a href=\"https://remote.com/\">Remote</a>, <a href=\"https://github.com/axios/axios\">Axios</a> and <a href=\"https://tanstack.com/query/v4/docs/react/overview\">React Query</a> are used to build the “data layer” and interact with API endpoints. The combination of these two libraries allows us to easily fetch, cache, and update data in React applications.</p>\n<blockquote>\n<p>This blog post was originally published in the <a href=\"https://remote.com/blog/api-using-axios-react-query\">Remote Engineering</a> blog</p>\n</blockquote>\n<p>As the Remote engineering team grew bigger, the lack of consistency when interacting with the data layer started to become more evident. There was no convention of where Axios services and React Query queries or mutations should be defined. Each development team created React Query hooks and named query keys depending on their preferences. While none of these was wrong on its own, using all of them in the same codebase was confusing and less predictable, adding an unnecessary level of cognitive load to the overall understanding of the application.</p>\n<p>The goal of this blog post is to give an overview of the advantages of having a data layer API to address the following issues:</p>\n<ul>\n<li><strong>Standardize directory structure</strong>: Axios services and React Query hooks were inconsistently defined throughout the application. Sometimes, these would be defined in a <code class=\"language-text\">services.js</code> file, others in a <code class=\"language-text\">hooks.js</code> file, or even in a file of their own such as <code class=\"language-text\">useMyHook.js</code>. These files were located in the application domain, where they were used, or at the root level if used by multiple domains.</li>\n<li><strong>Enforce a naming convention</strong>: The resulting React Query hooks were inconsistently named as well. Hooks that were meant to be used by a specific user role were inadvertently named differently. For instance, hooks meant to be used by an “Admin” role were named <code class=\"language-text\">useSubmitCompanyAsAdmin()</code> (postfixed) or <code class=\"language-text\">useAdminUpdateCompany()</code> (prefixed) without any specific reason.</li>\n<li><strong>Consistent query keys</strong>: The query keys used by React Query to manage query caching followed no convention either. Some developers defined them as an array, while others didn’t. The name of the query key sometimes used <code class=\"language-text\">camelCase</code> notation, while in others it was <code class=\"language-text\">kebab-case</code>. Furthermore, the query keys were on occasion defined in the same place as the hook that used it, while others were in a separate file (e.g., <code class=\"language-text\">constants.js</code>).</li>\n</ul>\n<h2>Initial Proposals</h2>\n<h3>Static Analysis / CI Processes</h3>\n<p>The first proposed solution was to create a set of conventions regarding where to create these services and hooks and how to name them. These conventions were to be enforced through a combination of linting and CI processes (e.g., ESLint and Danger JS), thus standardizing their creation and usage.</p>\n<p>The main downside of this approach is that it has a high cognitive load, as developers would need to learn where to create services/hooks, how to name them, and how to name their query keys, if any, or an error would be raised. Additionally, this would require a significant amount of effort to create and maintain rules that enforce the desired conventions.</p>\n<h3>Automated Code Generation</h3>\n<p>Automated code generation was suggested as a solution to decrease the number of decisions developers needed to make. Additionally, automated code generation would aid in creating a consistent development experience and API regardless of the domain and requirements.</p>\n<p>This approach was implemented, allowing developers to run a script to create all the necessary Axios and React Query tools needed to interact with the server API:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run data-layer:new <span class=\"token string\">\"GET /api/v1/users/:userId/invoices\"</span></code></pre></div>\n<p>An illustrative generated file for the <code class=\"language-text\">GET '/api/v1/users/:userId/invoices'</code> endpoint would look like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * This file is autogenerated\n */</span>\n\n<span class=\"token comment\">// Set up Axios API service</span>\n<span class=\"token keyword\">const</span> fetchUsersInvoicesByUserId <span class=\"token operator\">=</span> <span class=\"token function\">createApiService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/users/:userId/invoices'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">'/api/v1'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Automatically build a query key to be used with React Query</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> fetchUsersInvoicesByUserIdQueryName <span class=\"token operator\">=</span> <span class=\"token string\">'fetch_users_invoices_by_user_id'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Export hook allowing consumers to specify params and options as desired</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchUsersInvoicesByUserId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>fetchUsersInvoicesByUserIdAndByInvoiceIdQueryName<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchUsersInvoicesByUserId</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    config<span class=\"token punctuation\">.</span>options\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This approach worked well because it allowed the standardization of how Axios and React Query were used in the codebase without requiring much input from developers, but it also had its drawbacks:</p>\n<ul>\n<li>The major drawback of this implementation was that it added an extra level of indirection, as there was a need to translate an API endpoint such as <code class=\"language-text\">GET '/api/v1/users/:userId/invoices</code> to the hook name <code class=\"language-text\">useFetchUsersInvoicesByUserId</code>.</li>\n<li>Automatically generating human-readable — and meaningful — variable and method names based solely on an API endpoint is difficult. For instance, longer endpoints resulted in generated method/hook names that were borderline unreadable.</li>\n<li>Auto-generated files were git ignored, and because developers could remove, add, pull, or update existing endpoints at any point, there was a need to keep generated files in sync at all times.</li>\n</ul>\n<h2>Final Solution</h2>\n<h3>The Data Layer API</h3>\n<p>Regardless of the approach selected to solve the problems that we were facing, there was one thing that remained consistent: the endpoint. An endpoint name and its HTTP verb must match the server API. Inspired by <a href=\"https://github.blog/2020-04-09-from-48k-lines-of-code-to-10-the-story-of-githubs-javascript-sdk/\">GitHub’s Javascript SDK</a>, we chose to solve the problems with automated code generation by instead creating a lightweight abstraction on top of Axios and React Query that allows seamless interaction with the server API.</p>\n<p>The gist of the abstraction relies on creating centralized configuration files that define endpoints. For each HTTP verb, a configuration file was created: <code class=\"language-text\">data-layer/GET.endpoints.js</code>, <code class=\"language-text\">data-layer/POST.endpoints.js</code>, etc. These configuration files act as the SSoT for services, and might specify custom options needed for the endpoints to work properly, such as serialization rules or form data submission options:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// data-layer/GET.endpoints.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'/api/v1/users/:userId/invoices'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* endpoint config */</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, a hook for each HTTP verb was created: <code class=\"language-text\">useGet</code>, <code class=\"language-text\">usePost</code>, etc. These hooks take care of creating a service, a standardized query key, and returning a React Query <code class=\"language-text\">useQuery</code> or <code class=\"language-text\">useMutation</code> result accordingly. An illustrative implementation of the <code class=\"language-text\">useGet</code> hook is shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useGet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use the configuration file to create a service</span>\n  <span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> <span class=\"token function\">createService</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Build a standardized query key</span>\n  <span class=\"token keyword\">const</span> queryKey <span class=\"token operator\">=</span> <span class=\"token function\">createQueryKey</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Same return value as React Query `useQuery`</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n    queryKey<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    config<span class=\"token punctuation\">.</span>options\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>These data layer hooks allow developers to use the configured endpoints as is, because all that’s needed is the endpoint name itself (no indirection):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Fetch the invoices of the user with `userId=1`</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">pathParams</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v1/users/:userId/invoices'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In addition to the hooks, which allow to query or mutate data, a few other utility hooks have been created, such as the <code class=\"language-text\">useInvalidateQuery</code>, which internally uses the React Query <code class=\"language-text\">useQueryClient </code> hook to invalidate a query key by using only the endpoint name with support for query params, path params, and custom filters:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> invalidateQuery <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInvalidateQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Invalidate invoices query for the user with `userId=1`</span>\n    <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">pathParams</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">invalidateQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v1/users/:userId/invoices'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">usePost</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v1/users/:userId/invoices'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCreateInvoice</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">bodyParams</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create an invoice for the user with `userId=1`</span>\n  mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">pathParams</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> bodyParams <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The data layer was designed to be extendable in such a way that its API takes care of conventions by itself. This allows developers to compose custom hooks on top of the ones already exposed by the data layer or simply to create hooks that specify certain options by default.</p>\n<p>Additionally, the data layer uses TypeScript, which makes it easier for developers to adopt the hooks; provides autocomplete suggestions when typing an endpoint name depending on the hook being used (i.e., depending on the configuration file the hook uses);and even raises an error if an endpoint that doesn’t exist is specified.</p>\n<p><img src=\"https://raw.githubusercontent.com/diegocasmo/diegocasmo.github.io/main/static/data-layer-autocomplete-suggestions.png\" alt=\"Data layer autocomplete suggestions when typing an endpoint name\">\nAutocomplete suggestions when typing an endpoint name.</p>\n<h2>Looking Forward</h2>\n<p>The data layer API has become the single source of truth, or SSoT, for all things query-related and will allow standardization for how Axios and React Query are used in the codebase. In order to increase its adoption, an ESLint rule using <a href=\"https://eslint.org/docs/latest/rules/no-restricted-imports\">no-restricted-imports</a> was created to warn about React Query <code class=\"language-text\">useQuery</code> or <code class=\"language-text\">useMutation</code> imports, instead favoring use of the data layer hooks that internally use these.</p>","fileAbsolutePath":"/Users/diego/diegocasmo/diegocasmo.github.io/content/blog/2022-12-19-api-using-axios-react-query.md","frontmatter":{"title":"Consistent Client-side Interaction with API Endpoints Using Axios and React Query","date":"December 19, 2022","description":null}},"previous":{"fields":{"slug":"/2021-09-19-email-and-password-based-authentication-with-expo-and-firebase-part-3-sign-in-forgot-password-and-update-password/"},"frontmatter":{"title":"Email and Password Based Authentication with Expo and Firebase Part 3 - Sign In, Forgot Password, and Update Password"}},"next":{"fields":{"slug":"/2024-10-06-our-most-valuable-asset/"},"frontmatter":{"title":"Our Most Valuable Asset"}}},"pageContext":{"id":"c67e7404-4407-5002-b252-86aa726c092c","previousPostId":"e87f3eaa-ade4-562a-be8e-9848ae24c167","nextPostId":"ae53448d-6f24-5ac3-a13d-9af8e9696bfc"}},
    "staticQueryHashes": ["650872877"]}